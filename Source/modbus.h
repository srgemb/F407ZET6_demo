
#ifndef __MODBUS_H
#define __MODBUS_H

#include <stdbool.h>

#include "modbus_def.h"

//*************************************************************************************************
// Коды ошибок MODBUS
//*************************************************************************************************
typedef enum {
    MBUS_ANSWER_OK,                     //Ошибок нет
    //ошибки протокола MODBUS
    MBUS_ERROR_FUNC,                    //Принятый код функции не может быть обработан.
    MBUS_ERROR_ADDR,                    //Адрес данных, указанный в запросе, недоступен.
    MBUS_ERROR_DATA,                    //Значение, содержащееся в поле данных запроса, является недопустимой величиной.
    MBUS_ERROR_DEV,                     //Невосстанавливаемая ошибка имела место, пока ведомое устройство
                                        //пыталось выполнить затребованное действие.
    MBUS_ERROR_ACKWAIT,                 //Ведомое устройство приняло запрос и обрабатывает его, но это требует много времени.
                                        //Этот ответ предохраняет ведущее устройство от генерации ошибки тайм-аута.
    MBUS_ERROR_BUSY,                    //Ведомое устройство занято обработкой команды. Ведущее устройство должно повторить
                                        //сообщение позже, когда ведомое освободится.
    MBUS_ERROR_NOACK,                   //Ведомое устройство не может выполнить программную функцию, заданную в запросе.
                                        //Этот код возвращается для неуспешного программного запроса, использующего
                                        //функции с номерами 13 или 14. Ведущее устройство должно запросить диагностическую
                                        //информацию или информацию об ошибках от ведомого.
    MBUS_ERROR_MEMCRC,                  //Ведомое устройство при чтении расширенной памяти обнаружило ошибку контроля четности.
    //ошибки локальной функции
    MBUS_ERROR_PARAM,                   //ошибки в параметрах вызова функции
    MBUS_ANSWER_CRC,                    //ошибка КС принятого пакета
    MBUS_ANSWER_TIMEOUT                 //Ведомое устройство не отвечает.
} ModBusError;

#pragma pack( push, 1 )                 //выравнивание структуры по границе 1 байта

//*************************************************************************************************
// Структура передачи запроса по MODBUS
//*************************************************************************************************
typedef struct {
    uint8_t  dev_addr;                  //Адрес устройства
    uint8_t  function;                  //Функциональный код
    uint16_t addr_reg;                  //Адрес первого регистра HI/LO байт
    uint8_t  cnt_reg;                   //Количество регистров HI/LO байт
    void     *ptr_data;                 //Указатель на буфер для размещения данных
    uint8_t  *ptr_lendata;              //Указатель на переменную размера буфера для приема данных
} MBUS_REQUEST;                         //после приема - кол-во принятых данных

#pragma pack( pop )

//*************************************************************************************************
// Прототипы функций
//*************************************************************************************************
void ModBusInit( void );
ModBusError ModBusRequest( MBUS_REQUEST *reqst );

void RS485SendComplt( void );
void RS485RecvComplt( void );

void TestExec( void  );
void ModBusDebug( void  );

#endif
